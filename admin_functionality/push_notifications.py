# –¢–∏–º–∞ –ú–∏–Ω—Å–∫–∏–π tg: https://t.me/tima_minski
# –∑–¥–µ—Å—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –ø—É—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
from loader import bot
from config import dt, fs
import json
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import time
import threading


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def keyboard(call,group_id,val):
    keyboard = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ", callback_data="cn"+str(group_id))
    button2 = InlineKeyboardButton("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="an"+str(group_id))
    button3 = InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="cr"+str(group_id))
    button4 = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="pr" + str(group_id))


    exitbutton = InlineKeyboardButton(text="–≤—ã—Ö–æ–¥ ‚úñÔ∏è", callback_data="ss" + str(group_id))
    backbutton = InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data="st:" + str(group_id))
    backbutton2 = InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data="du" + str(group_id))
    backbutton3 = InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data="pr" + str(group_id)) # –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–∏—Ç—å
    backbutton4 = InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data="cr" + str(group_id))  # —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏—Ç—å
    run_button = InlineKeyboardButton('C—Ç–∞—Ä—Ç', callback_data="go++" + str(group_id))
    stop_button = InlineKeyboardButton('C—Ç–æ–ø', callback_data="go--" + str(group_id))
    del_button = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data="godl" + str(group_id))
    time1 = InlineKeyboardButton('30 –º–∏–Ω', callback_data="ti30" + str(group_id))
    time2 = InlineKeyboardButton('60 –º–∏–Ω', callback_data="ti60" + str(group_id))
    time3 = InlineKeyboardButton('–ó–∞–¥–∞—Ç—å —Å–≤–æ–µ', callback_data="ti00" + str(group_id))


    if val =="0":
        keyboard.add(button1, backbutton, exitbutton)
    if val == "1":
        keyboard.add(backbutton2, exitbutton)
    if val == "2":
        keyboard.add(button3, button4,backbutton2,exitbutton)
    if val == "3":
        keyboard.add(time1,time2,time3,backbutton4,exitbutton)
    if val == "4":
        keyboard.add(stop_button,del_button,backbutton,exitbutton)
    if val == "5":
        keyboard.add(run_button,backbutton3,exitbutton)
    if val == "7":
        keyboard.add(run_button,del_button,backbutton,exitbutton)
    if val == "8":
        keyboard.add(stop_button,del_button,backbutton,exitbutton)
    if val == "9":
        keyboard.add(run_button,del_button,backbutton,exitbutton)



    return keyboard



def notification(call, group_id):
    with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
        list = json.load(f)
        f.close()
        if len(list['active']) == 0:
            val = "0"
            bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text='–ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üîî\n\n'
                                '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å!',
                              reply_markup=keyboard(call,group_id,val), parse_mode='Markdown',
                              disable_web_page_preview=True)
        else:
            if list["public"] =="yes":
                val = "8"
                bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                                      text='–ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üîî\n'
                                           '‚ö†Ô∏è–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ‚ö†Ô∏è\n\n' + list['active'] +'\n\n –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ,'
                                           ' –Ω–∞–∂–º–∏—Ç–µ "–£–¥–∞–ª–∏—Ç—å" —á—Ç–æ–± —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ',
                                      reply_markup=keyboard(call, group_id, val), parse_mode='Markdown',
                                      disable_web_page_preview=True)
            if list["public"] == "no":
                val = "9"
                bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                                      text='–ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üîî\n'
                                           '‚ö†Ô∏è–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ‚ö†Ô∏è\n\n' + list[
                                          'active'] + '\n\n –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ,'
                                                      ' –Ω–∞–∂–º–∏—Ç–µ "–£–¥–∞–ª–∏—Ç—å" —á—Ç–æ–± —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ',
                                      reply_markup=keyboard(call, group_id, val), parse_mode='Markdown',
                                      disable_web_page_preview=True)

# —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
def new_notification(message, call, group_id):
    val = "2"
    with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
        list = json.loads(f.read())
        f.close()

        if message.content_type == "text" and message.text.replace(" ", "") != "":
            list["new"] = (message.text)
            bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text= '–í—ã–≥–ª—è–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Ç —Ç–∞–∫: üòä\n\n' + list["new"]
                                  ,reply_markup=keyboard(call,group_id,val),
                              parse_mode="Markdown", disable_web_page_preview=True)
        else:
            val = "0"
            bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                                  text='‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ ! –µ—â–µ —Ä–∞–∑ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–∏ '
                                       '–¢–ï–ö–°–¢ ‚ö†Ô∏è'
                                  , reply_markup=keyboard(call, group_id, val),
                                  parse_mode="Markdown", disable_web_page_preview=True)

        with open(f'groups/{str(group_id)}/push_notifications.json', "w", encoding="utf-8") as f:
            json.dump(list, f, ensure_ascii=False, indent=4)
            f.close()
        bot.delete_message(message.chat.id, message.message_id)


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç
def create_notification(message, call, group_id):
    val = "2"
    with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
        list = json.loads(f.read())
        f.close()
    if message.content_type == "text" and message.text.replace(" ", "") != "":
        list["new"] = message.text
        bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text='–í—ã–≥–ª—è–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Ç —Ç–∞–∫: üòä\n\n' + list["new"]
                              , reply_markup=keyboard(call, group_id, val),
                              parse_mode="Markdown", disable_web_page_preview=True)
        with open(f'groups/{str(group_id)}/push_notifications.json', "w", encoding="utf-8") as f:
            json.dump(list, f, ensure_ascii=False, indent=4)
            f.close()
    else:
        val = "2"
        bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text='–í—ã–≥–ª—è–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Ç —Ç–∞–∫: üòä\n\n' + list["new"] +
                              '\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ ! –µ—â–µ —Ä–∞–∑ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–∏ '
                                       '–¢–ï–ö–°–¢ ‚ö†Ô∏è'
                              , reply_markup=keyboard(call, group_id, val),
                              parse_mode="Markdown", disable_web_page_preview=True)
    bot.delete_message(message.chat.id, message.message_id)


#—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def time_notifications(call,group_id,data_time):
    val = "5"
    with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
        list = json.loads(f.read())
        f.close()
        list["new_time"] = data_time
        bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text='–í—ã–≥–ª—è–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Ç —Ç–∞–∫: üòä\n\n' + list["new"] +
                                   '\n\n –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ: ' + list["new_time"] + ' –º–∏–Ω—É—Ç.'
                              , reply_markup=keyboard(call, group_id, val),
                              parse_mode="Markdown", disable_web_page_preview=True)
        with open(f'groups/{str(group_id)}/push_notifications.json', "w", encoding="utf-8") as f:
            json.dump(list, f, ensure_ascii=False, indent=4)
            f.close()


#—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
def time_notifications_user(message, call, group_id):

    with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
        list = json.loads(f.read())
        f.close()
        if message.content_type == ("text") and message.text.replace(" ", "") and message.text.isdigit():
            list["new_time"] = message.text
            val = "5"
            bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                                  text='–í—ã–≥–ª—è–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Ç —Ç–∞–∫: üòä\n\n' + list["new"] +
                                       '\n\n –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ: ' + list["new_time"] + ' –º–∏–Ω—É—Ç.'
                                  , reply_markup=keyboard(call, group_id, val),
                                  parse_mode="Markdown", disable_web_page_preview=True)
            with open(f'groups/{str(group_id)}/push_notifications.json', "w", encoding="utf-8") as f:
                json.dump(list, f, ensure_ascii=False, indent=4)
                f.close()

        else:
            val = "3"
            bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                                  text='–í—ã–≥–ª—è–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Ç —Ç–∞–∫: üòä\n\n' + list["new"] +
                                       '\n\n ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞! –µ—â–µ —Ä–∞–∑ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–∏ '
                                       '–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –ú–ò–ù–£–¢–ê–• –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º ‚ö†Ô∏è'
                                  , reply_markup=keyboard(call, group_id, val),
                                  parse_mode="Markdown", disable_web_page_preview=True)
    bot.delete_message(message.chat.id, message.message_id)


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def text_notifications(call, group_id):
    val ="3"
    with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
        list = json.load(f)
        f.close()
        bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text='–í—ã–≥–ª—è–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Ç —Ç–∞–∫: üòä\n\n' + list["new"] +
                              '\n\n –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.'
                              , reply_markup=keyboard(call, group_id, val),
                              parse_mode="Markdown", disable_web_page_preview=True)

# —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç
def start_notifications(control_notifications,call,time_,group_id):
    with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
        list = json.load(f)
        f.close()
    counter = 1
    while counter < 2:
        if thread_stop == True:
            print(counter)
            counter += 1
            time.sleep(0.5)

        bot.send_message(group_id, text=list['active'])
        time.sleep(time_)



def handler_notifications(call):
    data = dt(call.data)
    flag = fs(call.data)
# —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if flag == "cn":
        val = "1"
        group_id = data
        message = bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text='–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üîî',
                              reply_markup=keyboard(call, group_id, val), parse_mode='Markdown',
                              disable_web_page_preview=True)

        bot.register_next_step_handler(message, new_notification, call, group_id)


    if flag == "an":
        group_id = data
        def all_notifications(group_id):
            with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
                list = json.load(f)
                f.close()
                if len(list['active']) > 0:
                    for x in list['active']:
                        message = bot.edit_message_text(message_id=call.message.message_id,
                                                        chat_id=call.message.chat.id,
                                                        text='–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üîî',
                                                        reply_markup=keyboard(call, group_id, val),
                                                        parse_mode='Markdown',
                                                        disable_web_page_preview=True)

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if flag=="cr":
        val = "1"
        group_id = data
        with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
            list = json.loads(f.read())
            f.close()
        message = bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text='–í—ã–≥–ª—è–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Ç —Ç–∞–∫: üòä\n\n' + list["new"] +
                                   '\n\n –ú–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç'
                              , reply_markup=keyboard(call, group_id, val),
                              parse_mode="Markdown", disable_web_page_preview=True)

        bot.register_next_step_handler(message, create_notification, call, group_id)

    # —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if flag == "pr":
        group_id = data
        text_notifications(call, group_id)

    # —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if flag == "ti":
        data_time = data[:2]
        group_id = data[2:]
        time_notifications(call, group_id, data_time)
        if data_time == "00":
            val ="2"
            with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
                list = json.loads(f.read())
                f.close()
            message = bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text='–í—ã–≥–ª—è–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Ç —Ç–∞–∫: üòä\n\n' + list["new"] +
                              '\n\n–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –≤ –ú–ò–ù–£–¢–ê–•.'
                              , parse_mode="Markdown", disable_web_page_preview=True)

            bot.register_next_step_handler(message, time_notifications_user, call, group_id)

    # –°–¢–ê–†–¢ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if flag == "go":
        print(data)
        control_notifications = data[:2]
        group_id = data[2:]

        global thread_stop
        if control_notifications =="++":
            val = "4"
            with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
                list = json.loads(f.read())
                f.close()
                list["active"] = list["new"]
                list["time"] = list["new_time"]
                list["public"] = "yes"

                bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                                          text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ üòä\n'
                                               '–í—ã–≥–ª—è–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Ç —Ç–∞–∫: \n\n' + list["active"] +
                                               '\n\n –ò–Ω—Ç–µ—Ä–≤–∞–ª: ' + str(list["time"]) + ' –º–∏–Ω—É—Ç.'
                                          , reply_markup=keyboard(call, group_id, val),
                                          parse_mode="Markdown", disable_web_page_preview=True)
                with open(f'groups/{str(group_id)}/push_notifications.json', "w", encoding="utf-8") as f:
                    json.dump(list, f, ensure_ascii=False, indent=4)
                    f.close()

                thread_stop = False
                thread = threading.Thread(target=start_notifications,args=(control_notifications,call,int(list["time"])*60,group_id))
                thread.start()


        if control_notifications == "--":
            thread_stop = True #–ü—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ True –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫
            val = "7"
            with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
                list = json.loads(f.read())
                f.close()
                list["public"] = "no"
            bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                                  text='‚ö†Ô∏è–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ‚ö†Ô∏è \n'
                                       '–í—ã–≥–ª—è–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Ç —Ç–∞–∫: üòä\n\n' + list["active"] +
                                       '\n\n –ò–Ω—Ç–µ—Ä–≤–∞–ª: ' + str(list["time"]) + ' –º–∏–Ω—É—Ç.'
                                  , reply_markup=keyboard(call, group_id, val),
                                  parse_mode="Markdown", disable_web_page_preview=True)
            with open(f'groups/{str(group_id)}/push_notifications.json', "w", encoding="utf-8") as f:
                json.dump(list, f, ensure_ascii=False, indent=4)
                f.close()


        if control_notifications == "dl":
            thread_stop = True  # –ü—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ True –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫

            with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
                list = json.loads(f.read())
                f.close()
                list["active"] = ""
                list["time"] = ""
                list["public"] = ""
            with open(f'groups/{str(group_id)}/push_notifications.json', "w", encoding="utf-8") as f:
                json.dump(list, f, ensure_ascii=False, indent=4)
                f.close()
                notification(call, group_id)






# def time_notifications(control_notifications,time_,group_id):
#     counter = 1
#     while counter < 2:
#         if thread_stop == True:
#             print(counter)
#             counter += 1
#             time.sleep(0.5)
#
#
#         with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
#             list = json.loads(f.read())
#             f.close()
#
#         bot.send_message(group_id, text=list['new'])
#         time.sleep(time_)
#
#         def mine_notifications(control_notifications,data_time,group_id):
#             global thread_stop
#             if control_notifications == "++":
#                 thread_stop = False
#                 thread = threading.Thread(target=time_notifications,args=(control_notifications,data_time,group_id))
#                 thread.start()
#             else:
#                 thread_stop = True  # –ü—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ True –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫
#
#         mine_notifications(control_notifications,data_time, group_id)