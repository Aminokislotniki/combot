# –¢–∏–º–∞ –ú–∏–Ω—Å–∫–∏–π tg: https://t.me/tima_minski
# –∑–¥–µ—Å—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –ø—É—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
from loader import bot
from config import dt, fs
import json
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import time
import threading


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def keyboard(call,group_id,val):
    keyboard = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ", callback_data="cn"+str(group_id))
    button2 = InlineKeyboardButton("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="an"+str(group_id))
    button3 = InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="cr"+str(group_id))
    button4 = InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="pr" + str(group_id))

    exitbutton = InlineKeyboardButton(text="–≤—ã—Ö–æ–¥ ‚úñÔ∏è", callback_data="ss")
    backbutton = InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data="st:" + str(group_id))
    backbutton2 = InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data="du" + str(group_id))
    time1 = InlineKeyboardButton('30 –º–∏–Ω', callback_data="ti30" + str(group_id))
    time2 = InlineKeyboardButton('60 –º–∏–Ω', callback_data="ti60" + str(group_id))
    time3 = InlineKeyboardButton('–ó–∞–¥–∞—Ç—å —Å–≤–æ–µ', callback_data="ti00" + str(group_id))


    if val =="0":
        keyboard.add(button1, button2, backbutton, exitbutton)
    if val == "1":
        keyboard.add(backbutton2, exitbutton)
    if val == "2":
        keyboard.add(button3, button4,backbutton2,exitbutton)
    if val == "3":
        keyboard.add(time1,time2,time3,backbutton2)

    return keyboard



def notification(call, group_id):
    val = "0"
    with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
        list = json.load(f)
        f.close()
        bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text='–ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üîî',
                              reply_markup=keyboard(call,group_id,val), parse_mode='Markdown',
                              disable_web_page_preview=True)

# —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
def new_notification(message, call, group_id):
    val = "2"
    with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
        list = json.loads(f.read())
        f.close()

        if message.content_type == "text" and message.text.replace(" ", "") != "":
            list["new"] = (message.text)
            bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text= '–í—ã–≥–ª—è–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Ç —Ç–∞–∫: üòä\n\n' + list["new"]
                                  ,reply_markup=keyboard(call,group_id,val),
                              parse_mode="Markdown", disable_web_page_preview=True)


        with open(f'groups/{str(group_id)}/push_notifications.json', "w", encoding="utf-8") as f:
            json.dump(list, f, ensure_ascii=False, indent=4)
            f.close()
        bot.delete_message(message.chat.id, message.message_id)


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
def create_notification(message, call, group_id):
    val = "2"
    with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
        list = json.loads(f.read())
        f.close()


    if message.content_type == "text" and message.text.replace(" ", "") != "":
        list["new"] = (message.text)
        bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text='–í—ã–≥–ª—è–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Ç —Ç–∞–∫: üòä\n\n' + list["new"]
                              , reply_markup=keyboard(call, group_id, val),
                              parse_mode="Markdown", disable_web_page_preview=True)
        with open(f'groups/{str(group_id)}/push_notifications.json', "w", encoding="utf-8") as f:
            json.dump(list, f, ensure_ascii=False, indent=4)
            f.close()
    bot.delete_message(message.chat.id, message.message_id)

def time_notifications(time_,group_id):
    while True:

        with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
            list = json.loads(f.read())
            f.close()

        bot.send_message(group_id, text=list['new'])
        time.sleep(time_)




# —Ñ—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
def public_notifications(call, group_id):
    val ="3"
    with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
        list = json.load(f)
        f.close()
        bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text='–í—ã–≥–ª—è–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Ç —Ç–∞–∫: üòä\n\n' + list["new"] +
                              '\n\n –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.'
                              , reply_markup=keyboard(call, group_id, val),
                              parse_mode="Markdown", disable_web_page_preview=True)

def handler_notifications(call):
    data = dt(call.data)
    flag = fs(call.data)
# —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if flag == "cn":
        val = "1"
        group_id = data
        message = bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text='–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üîî\n'
                                   '–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º',
                              reply_markup=keyboard(call, group_id, val), parse_mode='Markdown',
                              disable_web_page_preview=True)

        bot.register_next_step_handler(message, new_notification, call, group_id)


    if flag == "an":
        print("hi")


 # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if flag=="cr":
        val = "2"
        group_id = data
        with open(f'groups/{str(group_id)}/push_notifications.json', "r", encoding="utf-8") as f:
            list = json.loads(f.read())
            f.close()
        message = bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text='–í—ã–≥–ª—è–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Ç —Ç–∞–∫: üòä\n\n' + list["new"] +
                                   '\n\n –ú–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç'
                              , reply_markup=keyboard(call, group_id, val),
                              parse_mode="Markdown", disable_web_page_preview=True)

        bot.register_next_step_handler(message, create_notification, call, group_id)

# –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if flag == "pr":
        group_id = data
        public_notifications(call, group_id)


    if flag == "ti":
        data_time = int(data[:2])*60
        group_id = int(data[2:])

        t = threading.Thread(target=time_notifications, args=(5,group_id))  # 100 –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞—Å—ã–ø–∞–µ—Ç
        t.start()




